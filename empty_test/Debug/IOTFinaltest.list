
IOTFinaltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08001440  08001440  00011440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015a0  080015a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015a0  080015a0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015a0  080015a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015a0  080015a0  000115a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080015a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000068  08001610  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08001610  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cc9  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007d4  00000000  00000000  00021d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00022530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  000226d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002525  00000000  00000000  00022808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000158e  00000000  00000000  00024d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000973a  00000000  00000000  000262bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  0002f9f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008d4  00000000  00000000  0002fa44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08001428 	.word	0x08001428

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08001428 	.word	0x08001428

08000170 <HEsp_voidInit>:

u8 Quotes	[]= "\""	;
u8 Comma 	[]	 = {","};

void HEsp_voidInit()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	u8 Local_u8Result =0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]

	//check for ok
	while(Local_u8Result == 0)
 800017a:	e008      	b.n	800018e <HEsp_voidInit+0x1e>
	{
		//Echo disable
		MUSART1_voidTransmit("ATE0\r\n");
 800017c:	480f      	ldr	r0, [pc, #60]	; (80001bc <HEsp_voidInit+0x4c>)
 800017e:	f000 fbaf 	bl	80008e0 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(ECHO_TIMEOUT,1);
 8000182:	2101      	movs	r1, #1
 8000184:	2064      	movs	r0, #100	; 0x64
 8000186:	f000 f905 	bl	8000394 <u8EspValidateCmd>
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Result == 0)
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d0f3      	beq.n	800017c <HEsp_voidInit+0xc>

	}

	Local_u8Result =0;
 8000194:	2300      	movs	r3, #0
 8000196:	71fb      	strb	r3, [r7, #7]

	//check for ok
	while(Local_u8Result== 0)
 8000198:	e008      	b.n	80001ac <HEsp_voidInit+0x3c>
	{
		//set station mode
		MUSART1_voidTransmit("AT+CWMODE=1\r\n");
 800019a:	4809      	ldr	r0, [pc, #36]	; (80001c0 <HEsp_voidInit+0x50>)
 800019c:	f000 fba0 	bl	80008e0 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(MODE_TIMEOUT,11);
 80001a0:	210b      	movs	r1, #11
 80001a2:	2096      	movs	r0, #150	; 0x96
 80001a4:	f000 f8f6 	bl	8000394 <u8EspValidateCmd>
 80001a8:	4603      	mov	r3, r0
 80001aa:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Result== 0)
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d0f3      	beq.n	800019a <HEsp_voidInit+0x2a>
	}

}
 80001b2:	bf00      	nop
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	08001440 	.word	0x08001440
 80001c0:	08001448 	.word	0x08001448

080001c4 <HEsp_voidConnectOnWifi>:
void HEsp_voidConnectOnWifi(u8 *Copy_u8Name, u8 *Copy_u8Password)	//AT+CWJAP_CUR="Name","Pass"
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b0a0      	sub	sp, #128	; 0x80
 80001c8:	af04      	add	r7, sp, #16
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]
	u8 Local_u8Result = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u8 Local_u8Data[100] = {0};
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	2260      	movs	r2, #96	; 0x60
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fcdf 	bl	8000ba4 <memset>

	sprintf(Local_u8Data,"AT+CWJAP_CUR=%s%s%s,%s%s%s\r\n",Quotes,Copy_u8Name,Quotes,Quotes,Copy_u8Password,Quotes);
 80001e6:	f107 0008 	add.w	r0, r7, #8
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <HEsp_voidConnectOnWifi+0x6c>)
 80001ec:	9303      	str	r3, [sp, #12]
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	9302      	str	r3, [sp, #8]
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <HEsp_voidConnectOnWifi+0x6c>)
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <HEsp_voidConnectOnWifi+0x6c>)
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <HEsp_voidConnectOnWifi+0x6c>)
 80001fe:	490d      	ldr	r1, [pc, #52]	; (8000234 <HEsp_voidConnectOnWifi+0x70>)
 8000200:	f000 fcd8 	bl	8000bb4 <siprintf>


	//check for ok
	while(Local_u8Result== 0)
 8000204:	e00b      	b.n	800021e <HEsp_voidConnectOnWifi+0x5a>
	{
		//send Name and pass
		MUSART1_voidTransmit(Local_u8Data);
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fb68 	bl	80008e0 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(ROUTER_TIMEOUT,2);
 8000210:	2102      	movs	r1, #2
 8000212:	4809      	ldr	r0, [pc, #36]	; (8000238 <HEsp_voidConnectOnWifi+0x74>)
 8000214:	f000 f8be 	bl	8000394 <u8EspValidateCmd>
 8000218:	4603      	mov	r3, r0
 800021a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(Local_u8Result== 0)
 800021e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0ef      	beq.n	8000206 <HEsp_voidConnectOnWifi+0x42>
	}


}
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	3770      	adds	r7, #112	; 0x70
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000000 	.word	0x20000000
 8000234:	08001458 	.word	0x08001458
 8000238:	00432380 	.word	0x00432380

0800023c <HEsp_voidConnectOnServer>:
void HEsp_voidConnectOnServer(u8 *Copy_u8IP)//AT+CIPSTART="TCP","162.253.155.226",80
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b0a0      	sub	sp, #128	; 0x80
 8000240:	af04      	add	r7, sp, #16
 8000242:	6078      	str	r0, [r7, #4]
	u8 Local_u8Result = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u8 Local_u8Data[100] = {0};
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	2260      	movs	r2, #96	; 0x60
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fca4 	bl	8000ba4 <memset>

	sprintf(Local_u8Data,"AT+CIPSTART=%sTCP%s,%s%s%s,80\r\n",Quotes,Quotes,Quotes,Copy_u8IP,Quotes);
 800025c:	f107 0008 	add.w	r0, r7, #8
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <HEsp_voidConnectOnServer+0x68>)
 8000262:	9302      	str	r3, [sp, #8]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <HEsp_voidConnectOnServer+0x68>)
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <HEsp_voidConnectOnServer+0x68>)
 800026e:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <HEsp_voidConnectOnServer+0x68>)
 8000270:	490d      	ldr	r1, [pc, #52]	; (80002a8 <HEsp_voidConnectOnServer+0x6c>)
 8000272:	f000 fc9f 	bl	8000bb4 <siprintf>


	//check for ok
	while(Local_u8Result== 0)
 8000276:	e00b      	b.n	8000290 <HEsp_voidConnectOnServer+0x54>
	{
		//send IP
		MUSART1_voidTransmit(Local_u8Data);
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb2f 	bl	80008e0 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(SERVER_TIMEOUT,3);
 8000282:	2103      	movs	r1, #3
 8000284:	4809      	ldr	r0, [pc, #36]	; (80002ac <HEsp_voidConnectOnServer+0x70>)
 8000286:	f000 f885 	bl	8000394 <u8EspValidateCmd>
 800028a:	4603      	mov	r3, r0
 800028c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while(Local_u8Result== 0)
 8000290:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0ef      	beq.n	8000278 <HEsp_voidConnectOnServer+0x3c>
	}


}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3770      	adds	r7, #112	; 0x70
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000000 	.word	0x20000000
 80002a8:	08001478 	.word	0x08001478
 80002ac:	0010c8e0 	.word	0x0010c8e0

080002b0 <HEsp_voidSendDataPOST>:

u8 HEsp_voidSendDataPOST(u8 Copy_u8DataSize,u8 *Copy_u8WebSite,u8 *file_name,u8 length,u8 *data)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b0a2      	sub	sp, #136	; 0x88
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60b9      	str	r1, [r7, #8]
 80002b8:	607a      	str	r2, [r7, #4]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4603      	mov	r3, r0
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	4613      	mov	r3, r2
 80002c2:	73bb      	strb	r3, [r7, #14]
	x:;
	u8 Local_u8Result = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	u8 Local_u8Data[100] = {0};
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2260      	movs	r2, #96	; 0x60
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fc64 	bl	8000ba4 <memset>

	sprintf(Local_u8Data,"AT+CIPSEND=%d\r\n",Copy_u8DataSize);
 80002dc:	7bfa      	ldrb	r2, [r7, #15]
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	4928      	ldr	r1, [pc, #160]	; (8000384 <HEsp_voidSendDataPOST+0xd4>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fc65 	bl	8000bb4 <siprintf>


	//check for ok

		//send data size
		MUSART1_voidTransmit(Local_u8Data);
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 faf6 	bl	80008e0 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(PREREQUEST_TIMEOUT,4);
 80002f4:	2104      	movs	r1, #4
 80002f6:	20c8      	movs	r0, #200	; 0xc8
 80002f8:	f000 f84c 	bl	8000394 <u8EspValidateCmd>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if(Local_u8Result== 0)
 8000302:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000306:	2b00      	cmp	r3, #0
 8000308:	d103      	bne.n	8000312 <HEsp_voidSendDataPOST+0x62>
				{
					HEsp_voidConnectOnServer("69.197.143.14");
 800030a:	481f      	ldr	r0, [pc, #124]	; (8000388 <HEsp_voidSendDataPOST+0xd8>)
 800030c:	f7ff ff96 	bl	800023c <HEsp_voidConnectOnServer>
					goto x;
 8000310:	e7d8      	b.n	80002c4 <HEsp_voidSendDataPOST+0x14>
				}


	//delete saved data to write a new one
	for(int i=0;i<98;i++)
 8000312:	2300      	movs	r3, #0
 8000314:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000316:	e008      	b.n	800032a <HEsp_voidSendDataPOST+0x7a>
	{
		Local_u8Data[i]=0;
 8000318:	f107 0214 	add.w	r2, r7, #20
 800031c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800031e:	4413      	add	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<98;i++)
 8000324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000326:	3301      	adds	r3, #1
 8000328:	67fb      	str	r3, [r7, #124]	; 0x7c
 800032a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800032c:	2b61      	cmp	r3, #97	; 0x61
 800032e:	ddf3      	ble.n	8000318 <HEsp_voidSendDataPOST+0x68>
	Content-Length: 2

	ok
	AT+CIPCLOSE*/
	//send to website
	sprintf(Local_u8Data,"POST /%s HTTP/1.1\r\nHost: %s\r\nContent-Length: %d\r\n\r\n%s\r\nAT+CIPCLOSE\r\n",file_name,Copy_u8WebSite,length,data);
 8000330:	7bbb      	ldrb	r3, [r7, #14]
 8000332:	f107 0014 	add.w	r0, r7, #20
 8000336:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800033a:	9201      	str	r2, [sp, #4]
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4912      	ldr	r1, [pc, #72]	; (800038c <HEsp_voidSendDataPOST+0xdc>)
 8000344:	f000 fc36 	bl	8000bb4 <siprintf>
	Local_u8Result=0;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	//check for ok

		//send data size
		MUSART1_voidTransmit(Local_u8Data);
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	4618      	mov	r0, r3
 8000354:	f000 fac4 	bl	80008e0 <MUSART1_voidTransmit>
		//if recieve OK then break while loop
		Local_u8Result = u8EspValidateCmd(REQUEST_TIMEOUT,44);
 8000358:	212c      	movs	r1, #44	; 0x2c
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <HEsp_voidSendDataPOST+0xe0>)
 800035c:	f000 f81a 	bl	8000394 <u8EspValidateCmd>
 8000360:	4603      	mov	r3, r0
 8000362:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if(Local_u8Result== 0)
 8000366:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800036a:	2b00      	cmp	r3, #0
 800036c:	d103      	bne.n	8000376 <HEsp_voidSendDataPOST+0xc6>
		{
			HEsp_voidConnectOnServer("69.197.143.14");
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <HEsp_voidSendDataPOST+0xd8>)
 8000370:	f7ff ff64 	bl	800023c <HEsp_voidConnectOnServer>
			goto x;
 8000374:	e7a6      	b.n	80002c4 <HEsp_voidSendDataPOST+0x14>
		}
	return Local_u8Result;
 8000376:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 800037a:	4618      	mov	r0, r3
 800037c:	3780      	adds	r7, #128	; 0x80
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	08001498 	.word	0x08001498
 8000388:	080014a8 	.word	0x080014a8
 800038c:	080014b8 	.word	0x080014b8
 8000390:	000dbba0 	.word	0x000dbba0

08000394 <u8EspValidateCmd>:
	return Local_u8Result;
}


u8 u8EspValidateCmd(u32 Copy_u32timeout,u8 iteration) //private func
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
	// any delay between trans & recieve will lead to frame lost or package lost
	u8  static volatile Local_u8Response[1000] ={0};
	u16 i=0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	81fb      	strh	r3, [r7, #14]
	u8 Local_u8Dummy = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	737b      	strb	r3, [r7, #13]
	u8 Local_u8Result = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	733b      	strb	r3, [r7, #12]

	while(Local_u8Dummy != 255)
 80003ac:	e00b      	b.n	80003c6 <u8EspValidateCmd+0x32>
	{
		Local_u8Dummy=MUSART1_u8Receive(Copy_u32timeout);
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 fabc 	bl	800092c <MUSART1_u8Receive>
 80003b4:	4603      	mov	r3, r0
 80003b6:	737b      	strb	r3, [r7, #13]
		Local_u8Response[i] = Local_u8Dummy;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	4950      	ldr	r1, [pc, #320]	; (80004fc <u8EspValidateCmd+0x168>)
 80003bc:	7b7a      	ldrb	r2, [r7, #13]
 80003be:	54ca      	strb	r2, [r1, r3]
		i++;
 80003c0:	89fb      	ldrh	r3, [r7, #14]
 80003c2:	3301      	adds	r3, #1
 80003c4:	81fb      	strh	r3, [r7, #14]
	while(Local_u8Dummy != 255)
 80003c6:	7b7b      	ldrb	r3, [r7, #13]
 80003c8:	2bff      	cmp	r3, #255	; 0xff
 80003ca:	d1f0      	bne.n	80003ae <u8EspValidateCmd+0x1a>
	}

	//check for ok
	for(i=0;i<50;i++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	81fb      	strh	r3, [r7, #14]
 80003d0:	e01d      	b.n	800040e <u8EspValidateCmd+0x7a>
	{
		if(Local_u8Response[i] == 'O' && Local_u8Response[i+1] == 'K' )
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	4a49      	ldr	r2, [pc, #292]	; (80004fc <u8EspValidateCmd+0x168>)
 80003d6:	5cd3      	ldrb	r3, [r2, r3]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b4f      	cmp	r3, #79	; 0x4f
 80003dc:	d109      	bne.n	80003f2 <u8EspValidateCmd+0x5e>
 80003de:	89fb      	ldrh	r3, [r7, #14]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a46      	ldr	r2, [pc, #280]	; (80004fc <u8EspValidateCmd+0x168>)
 80003e4:	5cd3      	ldrb	r3, [r2, r3]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b4b      	cmp	r3, #75	; 0x4b
 80003ea:	d102      	bne.n	80003f2 <u8EspValidateCmd+0x5e>
		{
			Local_u8Result = i;
 80003ec:	89fb      	ldrh	r3, [r7, #14]
 80003ee:	733b      	strb	r3, [r7, #12]
			break;
 80003f0:	e010      	b.n	8000414 <u8EspValidateCmd+0x80>
		}
		//add check for error on putty
		else if(Local_u8Response[i] == '>')
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	4a41      	ldr	r2, [pc, #260]	; (80004fc <u8EspValidateCmd+0x168>)
 80003f6:	5cd3      	ldrb	r3, [r2, r3]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b3e      	cmp	r3, #62	; 0x3e
 80003fc:	d102      	bne.n	8000404 <u8EspValidateCmd+0x70>
		{
			Local_u8Result = 95;
 80003fe:	235f      	movs	r3, #95	; 0x5f
 8000400:	733b      	strb	r3, [r7, #12]
			break;
 8000402:	e007      	b.n	8000414 <u8EspValidateCmd+0x80>
		}
		else
		{
			Local_u8Result = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	733b      	strb	r3, [r7, #12]
	for(i=0;i<50;i++)
 8000408:	89fb      	ldrh	r3, [r7, #14]
 800040a:	3301      	adds	r3, #1
 800040c:	81fb      	strh	r3, [r7, #14]
 800040e:	89fb      	ldrh	r3, [r7, #14]
 8000410:	2b31      	cmp	r3, #49	; 0x31
 8000412:	d9de      	bls.n	80003d2 <u8EspValidateCmd+0x3e>
		}

	}
	if(iteration==44)
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	2b2c      	cmp	r3, #44	; 0x2c
 8000418:	d15a      	bne.n	80004d0 <u8EspValidateCmd+0x13c>
		{
			for(i=0;i<999;i++)
 800041a:	2300      	movs	r3, #0
 800041c:	81fb      	strh	r3, [r7, #14]
 800041e:	e052      	b.n	80004c6 <u8EspValidateCmd+0x132>
			{
				if(Local_u8Response[i] == 'S' && Local_u8Response[i+1] == 'e'&& Local_u8Response[i+2] == 'n'&& Local_u8Response[i+3] == 't')
 8000420:	89fb      	ldrh	r3, [r7, #14]
 8000422:	4a36      	ldr	r2, [pc, #216]	; (80004fc <u8EspValidateCmd+0x168>)
 8000424:	5cd3      	ldrb	r3, [r2, r3]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b53      	cmp	r3, #83	; 0x53
 800042a:	d147      	bne.n	80004bc <u8EspValidateCmd+0x128>
 800042c:	89fb      	ldrh	r3, [r7, #14]
 800042e:	3301      	adds	r3, #1
 8000430:	4a32      	ldr	r2, [pc, #200]	; (80004fc <u8EspValidateCmd+0x168>)
 8000432:	5cd3      	ldrb	r3, [r2, r3]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b65      	cmp	r3, #101	; 0x65
 8000438:	d140      	bne.n	80004bc <u8EspValidateCmd+0x128>
 800043a:	89fb      	ldrh	r3, [r7, #14]
 800043c:	3302      	adds	r3, #2
 800043e:	4a2f      	ldr	r2, [pc, #188]	; (80004fc <u8EspValidateCmd+0x168>)
 8000440:	5cd3      	ldrb	r3, [r2, r3]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b6e      	cmp	r3, #110	; 0x6e
 8000446:	d139      	bne.n	80004bc <u8EspValidateCmd+0x128>
 8000448:	89fb      	ldrh	r3, [r7, #14]
 800044a:	3303      	adds	r3, #3
 800044c:	4a2b      	ldr	r2, [pc, #172]	; (80004fc <u8EspValidateCmd+0x168>)
 800044e:	5cd3      	ldrb	r3, [r2, r3]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b74      	cmp	r3, #116	; 0x74
 8000454:	d132      	bne.n	80004bc <u8EspValidateCmd+0x128>
				{
					if(Local_u8Response[i+11] == ':')
 8000456:	89fb      	ldrh	r3, [r7, #14]
 8000458:	330b      	adds	r3, #11
 800045a:	4a28      	ldr	r2, [pc, #160]	; (80004fc <u8EspValidateCmd+0x168>)
 800045c:	5cd3      	ldrb	r3, [r2, r3]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b3a      	cmp	r3, #58	; 0x3a
 8000462:	d128      	bne.n	80004b6 <u8EspValidateCmd+0x122>
					{
						if(Local_u8Response[i+12] == '0' && Local_u8Response[i+13] == '0'&& Local_u8Response[i+19] == '1'&& Local_u8Response[i+20] == 'F'&& Local_u8Response[i+21] == 'F')
 8000464:	89fb      	ldrh	r3, [r7, #14]
 8000466:	330c      	adds	r3, #12
 8000468:	4a24      	ldr	r2, [pc, #144]	; (80004fc <u8EspValidateCmd+0x168>)
 800046a:	5cd3      	ldrb	r3, [r2, r3]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b30      	cmp	r3, #48	; 0x30
 8000470:	d11e      	bne.n	80004b0 <u8EspValidateCmd+0x11c>
 8000472:	89fb      	ldrh	r3, [r7, #14]
 8000474:	330d      	adds	r3, #13
 8000476:	4a21      	ldr	r2, [pc, #132]	; (80004fc <u8EspValidateCmd+0x168>)
 8000478:	5cd3      	ldrb	r3, [r2, r3]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2b30      	cmp	r3, #48	; 0x30
 800047e:	d117      	bne.n	80004b0 <u8EspValidateCmd+0x11c>
 8000480:	89fb      	ldrh	r3, [r7, #14]
 8000482:	3313      	adds	r3, #19
 8000484:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <u8EspValidateCmd+0x168>)
 8000486:	5cd3      	ldrb	r3, [r2, r3]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b31      	cmp	r3, #49	; 0x31
 800048c:	d110      	bne.n	80004b0 <u8EspValidateCmd+0x11c>
 800048e:	89fb      	ldrh	r3, [r7, #14]
 8000490:	3314      	adds	r3, #20
 8000492:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <u8EspValidateCmd+0x168>)
 8000494:	5cd3      	ldrb	r3, [r2, r3]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b46      	cmp	r3, #70	; 0x46
 800049a:	d109      	bne.n	80004b0 <u8EspValidateCmd+0x11c>
 800049c:	89fb      	ldrh	r3, [r7, #14]
 800049e:	3315      	adds	r3, #21
 80004a0:	4a16      	ldr	r2, [pc, #88]	; (80004fc <u8EspValidateCmd+0x168>)
 80004a2:	5cd3      	ldrb	r3, [r2, r3]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b46      	cmp	r3, #70	; 0x46
 80004a8:	d102      	bne.n	80004b0 <u8EspValidateCmd+0x11c>
						{
							Local_u8Result = 50;
 80004aa:	2332      	movs	r3, #50	; 0x32
 80004ac:	733b      	strb	r3, [r7, #12]
							break;
 80004ae:	e00f      	b.n	80004d0 <u8EspValidateCmd+0x13c>
						}
						Local_u8Result = 95;
 80004b0:	235f      	movs	r3, #95	; 0x5f
 80004b2:	733b      	strb	r3, [r7, #12]
						break;
 80004b4:	e00c      	b.n	80004d0 <u8EspValidateCmd+0x13c>
					}
					else
					{
						Local_u8Result = 44;
 80004b6:	232c      	movs	r3, #44	; 0x2c
 80004b8:	733b      	strb	r3, [r7, #12]
						break;
 80004ba:	e009      	b.n	80004d0 <u8EspValidateCmd+0x13c>
					}

				}
				else
				{
					Local_u8Result = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	733b      	strb	r3, [r7, #12]
			for(i=0;i<999;i++)
 80004c0:	89fb      	ldrh	r3, [r7, #14]
 80004c2:	3301      	adds	r3, #1
 80004c4:	81fb      	strh	r3, [r7, #14]
 80004c6:	89fb      	ldrh	r3, [r7, #14]
 80004c8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d9a7      	bls.n	8000420 <u8EspValidateCmd+0x8c>
//			}
//		}
//
//	}
	//delete saved data to write a new one
	for(int i=0;i<999;i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	e007      	b.n	80004e6 <u8EspValidateCmd+0x152>
	{
		Local_u8Response[i]=0;
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <u8EspValidateCmd+0x168>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	4413      	add	r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<999;i++)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80004ec:	4293      	cmp	r3, r2
 80004ee:	ddf2      	ble.n	80004d6 <u8EspValidateCmd+0x142>
	}
	return Local_u8Result;
 80004f0:	7b3b      	ldrb	r3, [r7, #12]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000084 	.word	0x20000084

08000500 <MGPIO_VoidSetPinDirection>:
#include "GPIO_int.h"



void MGPIO_VoidSetPinDirection(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8MODE)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	460b      	mov	r3, r1
 800050c:	71bb      	strb	r3, [r7, #6]
 800050e:	4613      	mov	r3, r2
 8000510:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d07a      	beq.n	800060e <MGPIO_VoidSetPinDirection+0x10e>
 8000518:	2b02      	cmp	r3, #2
 800051a:	f300 80b1 	bgt.w	8000680 <MGPIO_VoidSetPinDirection+0x180>
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <MGPIO_VoidSetPinDirection+0x28>
 8000522:	2b01      	cmp	r3, #1
 8000524:	d03a      	beq.n	800059c <MGPIO_VoidSetPinDirection+0x9c>
					copy_u8PIN = copy_u8PIN-8;
					GPIOC_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
					GPIOC_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
				}
				break;
		default: break;
 8000526:	e0ab      	b.n	8000680 <MGPIO_VoidSetPinDirection+0x180>
			if(copy_u8PIN <= 7)			/* if PIN<7 CRH is not activated as else cancel 
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	2b07      	cmp	r3, #7
 800052c:	d817      	bhi.n	800055e <MGPIO_VoidSetPinDirection+0x5e>
					GPIOA_CRL &= ~((0b1111)<<(copy_u8PIN*4));  /*we CLR first as 0 OR 1 will 
 800052e:	4b5a      	ldr	r3, [pc, #360]	; (8000698 <MGPIO_VoidSetPinDirection+0x198>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	79ba      	ldrb	r2, [r7, #6]
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	210f      	movs	r1, #15
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	43d2      	mvns	r2, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a55      	ldr	r2, [pc, #340]	; (8000698 <MGPIO_VoidSetPinDirection+0x198>)
 8000542:	400b      	ands	r3, r1
 8000544:	6013      	str	r3, [r2, #0]
					GPIOA_CRL |= ((copy_u8MODE)<<(copy_u8PIN*4));
 8000546:	4b54      	ldr	r3, [pc, #336]	; (8000698 <MGPIO_VoidSetPinDirection+0x198>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	7979      	ldrb	r1, [r7, #5]
 800054c:	79ba      	ldrb	r2, [r7, #6]
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a50      	ldr	r2, [pc, #320]	; (8000698 <MGPIO_VoidSetPinDirection+0x198>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
				break;
 800055c:	e092      	b.n	8000684 <MGPIO_VoidSetPinDirection+0x184>
			else if(copy_u8PIN <= 15)	
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	f200 808f 	bhi.w	8000684 <MGPIO_VoidSetPinDirection+0x184>
					copy_u8PIN = copy_u8PIN-8;
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	3b08      	subs	r3, #8
 800056a:	71bb      	strb	r3, [r7, #6]
					GPIOA_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
 800056c:	4b4b      	ldr	r3, [pc, #300]	; (800069c <MGPIO_VoidSetPinDirection+0x19c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	79ba      	ldrb	r2, [r7, #6]
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	210f      	movs	r1, #15
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	43d2      	mvns	r2, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a47      	ldr	r2, [pc, #284]	; (800069c <MGPIO_VoidSetPinDirection+0x19c>)
 8000580:	400b      	ands	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
					GPIOA_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
 8000584:	4b45      	ldr	r3, [pc, #276]	; (800069c <MGPIO_VoidSetPinDirection+0x19c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	7979      	ldrb	r1, [r7, #5]
 800058a:	79ba      	ldrb	r2, [r7, #6]
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a41      	ldr	r2, [pc, #260]	; (800069c <MGPIO_VoidSetPinDirection+0x19c>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]
				break;
 800059a:	e073      	b.n	8000684 <MGPIO_VoidSetPinDirection+0x184>
			if(copy_u8PIN <= 7)		/* if PIN<7 CRH is not activated as else cancel 
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	2b07      	cmp	r3, #7
 80005a0:	d817      	bhi.n	80005d2 <MGPIO_VoidSetPinDirection+0xd2>
					GPIOB_CRL &= ~((0b1111)<<(copy_u8PIN*4));  /*we CLR first as 0 OR 1 will 
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <MGPIO_VoidSetPinDirection+0x1a0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	79ba      	ldrb	r2, [r7, #6]
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	210f      	movs	r1, #15
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a3a      	ldr	r2, [pc, #232]	; (80006a0 <MGPIO_VoidSetPinDirection+0x1a0>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
					GPIOB_CRL |= ((copy_u8MODE)<<(copy_u8PIN*4));
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MGPIO_VoidSetPinDirection+0x1a0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	7979      	ldrb	r1, [r7, #5]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <MGPIO_VoidSetPinDirection+0x1a0>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
				break;
 80005d0:	e05a      	b.n	8000688 <MGPIO_VoidSetPinDirection+0x188>
			else if(copy_u8PIN <= 15)
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d857      	bhi.n	8000688 <MGPIO_VoidSetPinDirection+0x188>
					copy_u8PIN = copy_u8PIN-8;	/*pins enters is more than 7 so we use PIN-8
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	3b08      	subs	r3, #8
 80005dc:	71bb      	strb	r3, [r7, #6]
					GPIOB_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <MGPIO_VoidSetPinDirection+0x1a4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	210f      	movs	r1, #15
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a2c      	ldr	r2, [pc, #176]	; (80006a4 <MGPIO_VoidSetPinDirection+0x1a4>)
 80005f2:	400b      	ands	r3, r1
 80005f4:	6013      	str	r3, [r2, #0]
					GPIOB_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MGPIO_VoidSetPinDirection+0x1a4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	7979      	ldrb	r1, [r7, #5]
 80005fc:	79ba      	ldrb	r2, [r7, #6]
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	4611      	mov	r1, r2
 8000606:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <MGPIO_VoidSetPinDirection+0x1a4>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6013      	str	r3, [r2, #0]
				break;
 800060c:	e03c      	b.n	8000688 <MGPIO_VoidSetPinDirection+0x188>
			if(copy_u8PIN <= 7)  /* if PIN<7 CRH is not activated as else cancel 
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	2b07      	cmp	r3, #7
 8000612:	d817      	bhi.n	8000644 <MGPIO_VoidSetPinDirection+0x144>
					GPIOC_CRL &= ~((0b1111)<<(copy_u8PIN*4));  /*we CLR first as 0 OR 1 will 
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MGPIO_VoidSetPinDirection+0x1a8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	79ba      	ldrb	r2, [r7, #6]
 800061a:	0092      	lsls	r2, r2, #2
 800061c:	210f      	movs	r1, #15
 800061e:	fa01 f202 	lsl.w	r2, r1, r2
 8000622:	43d2      	mvns	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <MGPIO_VoidSetPinDirection+0x1a8>)
 8000628:	400b      	ands	r3, r1
 800062a:	6013      	str	r3, [r2, #0]
					GPIOC_CRL |= ((copy_u8MODE)<<(copy_u8PIN*4));
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MGPIO_VoidSetPinDirection+0x1a8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	7979      	ldrb	r1, [r7, #5]
 8000632:	79ba      	ldrb	r2, [r7, #6]
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	fa01 f202 	lsl.w	r2, r1, r2
 800063a:	4611      	mov	r1, r2
 800063c:	4a1a      	ldr	r2, [pc, #104]	; (80006a8 <MGPIO_VoidSetPinDirection+0x1a8>)
 800063e:	430b      	orrs	r3, r1
 8000640:	6013      	str	r3, [r2, #0]
				break;
 8000642:	e023      	b.n	800068c <MGPIO_VoidSetPinDirection+0x18c>
			else if(copy_u8PIN <= 15)
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b0f      	cmp	r3, #15
 8000648:	d820      	bhi.n	800068c <MGPIO_VoidSetPinDirection+0x18c>
					copy_u8PIN = copy_u8PIN-8;
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	3b08      	subs	r3, #8
 800064e:	71bb      	strb	r3, [r7, #6]
					GPIOC_CRH &= ~((0b1111)<<(copy_u8PIN*4));  
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MGPIO_VoidSetPinDirection+0x1ac>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	210f      	movs	r1, #15
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	43d2      	mvns	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MGPIO_VoidSetPinDirection+0x1ac>)
 8000664:	400b      	ands	r3, r1
 8000666:	6013      	str	r3, [r2, #0]
					GPIOC_CRH |= ((copy_u8MODE)<<(copy_u8PIN*4));
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MGPIO_VoidSetPinDirection+0x1ac>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7979      	ldrb	r1, [r7, #5]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <MGPIO_VoidSetPinDirection+0x1ac>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6013      	str	r3, [r2, #0]
				break;
 800067e:	e005      	b.n	800068c <MGPIO_VoidSetPinDirection+0x18c>
		default: break;
 8000680:	bf00      	nop
 8000682:	e004      	b.n	800068e <MGPIO_VoidSetPinDirection+0x18e>
				break;
 8000684:	bf00      	nop
 8000686:	e002      	b.n	800068e <MGPIO_VoidSetPinDirection+0x18e>
				break;
 8000688:	bf00      	nop
 800068a:	e000      	b.n	800068e <MGPIO_VoidSetPinDirection+0x18e>
				break;
 800068c:	bf00      	nop
	}
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40010800 	.word	0x40010800
 800069c:	40010804 	.word	0x40010804
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	40010c04 	.word	0x40010c04
 80006a8:	40011000 	.word	0x40011000
 80006ac:	40011004 	.word	0x40011004

080006b0 <MGPIO_VoidSetPinValue>:
			default: break;
		}
}

void MGPIO_VoidSetPinValue(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8VALUE)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	460b      	mov	r3, r1
 80006bc:	71bb      	strb	r3, [r7, #6]
 80006be:	4613      	mov	r3, r2
 80006c0:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d040      	beq.n	800074a <MGPIO_VoidSetPinValue+0x9a>
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	dc5b      	bgt.n	8000784 <MGPIO_VoidSetPinValue+0xd4>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <MGPIO_VoidSetPinValue+0x26>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d01d      	beq.n	8000710 <MGPIO_VoidSetPinValue+0x60>
			else if(copy_u8VALUE == LOW)	//set pin value low
				{
					CLR_BIT(GPIOC_ODR , copy_u8PIN);
				}
					break;
		default: break;
 80006d4:	e056      	b.n	8000784 <MGPIO_VoidSetPinValue+0xd4>
			if(copy_u8VALUE == HIGH)	 	//set pin value high
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10a      	bne.n	80006f2 <MGPIO_VoidSetPinValue+0x42>
					SET_BIT(GPIOA_ODR , copy_u8PIN);
 80006dc:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MGPIO_VoidSetPinValue+0xec>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MGPIO_VoidSetPinValue+0xec>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
					break;
 80006f0:	e04a      	b.n	8000788 <MGPIO_VoidSetPinValue+0xd8>
			else if(copy_u8VALUE == LOW)	//set pin value low
 80006f2:	797b      	ldrb	r3, [r7, #5]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d147      	bne.n	8000788 <MGPIO_VoidSetPinValue+0xd8>
					CLR_BIT(GPIOA_ODR , copy_u8PIN);
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <MGPIO_VoidSetPinValue+0xec>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	43d2      	mvns	r2, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <MGPIO_VoidSetPinValue+0xec>)
 800070a:	400b      	ands	r3, r1
 800070c:	6013      	str	r3, [r2, #0]
					break;
 800070e:	e03b      	b.n	8000788 <MGPIO_VoidSetPinValue+0xd8>
			if(copy_u8VALUE == HIGH)		//set pin value high
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10a      	bne.n	800072c <MGPIO_VoidSetPinValue+0x7c>
					SET_BIT(GPIOB_ODR , copy_u8PIN);
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MGPIO_VoidSetPinValue+0xf0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	4611      	mov	r1, r2
 8000724:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <MGPIO_VoidSetPinValue+0xf0>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]
					break;
 800072a:	e02f      	b.n	800078c <MGPIO_VoidSetPinValue+0xdc>
			else if(copy_u8VALUE == LOW)	//set pin value LOW
 800072c:	797b      	ldrb	r3, [r7, #5]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d12c      	bne.n	800078c <MGPIO_VoidSetPinValue+0xdc>
					CLR_BIT(GPIOB_ODR , copy_u8PIN);
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MGPIO_VoidSetPinValue+0xf0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	2101      	movs	r1, #1
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	43d2      	mvns	r2, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MGPIO_VoidSetPinValue+0xf0>)
 8000744:	400b      	ands	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
					break;
 8000748:	e020      	b.n	800078c <MGPIO_VoidSetPinValue+0xdc>
			if(copy_u8VALUE == HIGH)		//set pin value high
 800074a:	797b      	ldrb	r3, [r7, #5]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10a      	bne.n	8000766 <MGPIO_VoidSetPinValue+0xb6>
					SET_BIT(GPIOC_ODR , copy_u8PIN);
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MGPIO_VoidSetPinValue+0xf4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	79ba      	ldrb	r2, [r7, #6]
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MGPIO_VoidSetPinValue+0xf4>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6013      	str	r3, [r2, #0]
					break;
 8000764:	e014      	b.n	8000790 <MGPIO_VoidSetPinValue+0xe0>
			else if(copy_u8VALUE == LOW)	//set pin value low
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d111      	bne.n	8000790 <MGPIO_VoidSetPinValue+0xe0>
					CLR_BIT(GPIOC_ODR , copy_u8PIN);
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MGPIO_VoidSetPinValue+0xf4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	43d2      	mvns	r2, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <MGPIO_VoidSetPinValue+0xf4>)
 800077e:	400b      	ands	r3, r1
 8000780:	6013      	str	r3, [r2, #0]
					break;
 8000782:	e005      	b.n	8000790 <MGPIO_VoidSetPinValue+0xe0>
		default: break;
 8000784:	bf00      	nop
 8000786:	e004      	b.n	8000792 <MGPIO_VoidSetPinValue+0xe2>
					break;
 8000788:	bf00      	nop
 800078a:	e002      	b.n	8000792 <MGPIO_VoidSetPinValue+0xe2>
					break;
 800078c:	bf00      	nop
 800078e:	e000      	b.n	8000792 <MGPIO_VoidSetPinValue+0xe2>
					break;
 8000790:	bf00      	nop
	}
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	4001080c 	.word	0x4001080c
 80007a0:	40010c0c 	.word	0x40010c0c
 80007a4:	4001100c 	.word	0x4001100c

080007a8 <RCC_voidInitSysClock>:
#include "RCC_config.h"



void RCC_voidInitSysClock(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	#if RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
	RCC_CR   = 0x00010000; /*Enable HSI with no bypass*/
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <RCC_voidInitSysClock+0x2c>)
 80007ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b2:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0x00000001; //select HSE clock as system clock 
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <RCC_voidInitSysClock+0x30>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
	/*	wait until the HSE to be stable	*/
	while(GET_BIT(RCC_CR,17) == 0 );
 80007ba:	bf00      	nop
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <RCC_voidInitSysClock+0x2c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	0c5b      	lsrs	r3, r3, #17
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f8      	beq.n	80007bc <RCC_voidInitSysClock+0x14>
	
	#else  
		#error("you choose wrong clock type")
	
	#endif 
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40021004 	.word	0x40021004

080007dc <RCC_voidEnableClock>:


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
	if(Copy_u8PerId <= 31)
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	d82a      	bhi.n	8000848 <RCC_voidEnableClock+0x6c>
		{
			switch(Copy_u8BusId)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d01c      	beq.n	8000832 <RCC_voidEnableClock+0x56>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	dc25      	bgt.n	8000848 <RCC_voidEnableClock+0x6c>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <RCC_voidEnableClock+0x2a>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d00b      	beq.n	800081c <RCC_voidEnableClock+0x40>
	
	else
		{
			/*Return Error*/
		}
}
 8000804:	e020      	b.n	8000848 <RCC_voidEnableClock+0x6c>
				case RCC_AHB 	: SET_BIT(RCC_AHBENR , Copy_u8PerId); break;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <RCC_voidEnableClock+0x78>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	2101      	movs	r1, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <RCC_voidEnableClock+0x78>)
 8000816:	430b      	orrs	r3, r1
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e015      	b.n	8000848 <RCC_voidEnableClock+0x6c>
				case RCC_APB1 	: SET_BIT(RCC_APB1ENR , Copy_u8PerId); break;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <RCC_voidEnableClock+0x7c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <RCC_voidEnableClock+0x7c>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e00a      	b.n	8000848 <RCC_voidEnableClock+0x6c>
				case RCC_APB2 	: SET_BIT(RCC_APB2ENR , Copy_u8PerId); break;
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <RCC_voidEnableClock+0x80>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	79ba      	ldrb	r2, [r7, #6]
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <RCC_voidEnableClock+0x80>)
 8000842:	430b      	orrs	r3, r1
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	bf00      	nop
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021014 	.word	0x40021014
 8000858:	4002101c 	.word	0x4002101c
 800085c:	40021018 	.word	0x40021018

08000860 <SysTick_Handler>:

	return RemainingTime;
}

void SysTick_Handler()	/*mwgoda f el .c m4 f el main */
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	if(MSTK_Repeat == MSTK_SINGLE_INTERVAL)
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <SysTick_Handler+0x34>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10e      	bne.n	800088a <SysTick_Handler+0x2a>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <SysTick_Handler+0x38>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <SysTick_Handler+0x38>)
 8000872:	f023 0302 	bic.w	r3, r3, #2
 8000876:	6013      	str	r3, [r2, #0]
		/*Stop timer and no repeating*/

		MSTK->CTRL=0;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <SysTick_Handler+0x38>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
		MSTK->LOAD = 0;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SysTick_Handler+0x38>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
		MSTK->VAL=0;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Handler+0x38>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
	}



	CALLBACK();
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <SysTick_Handler+0x3c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4798      	blx	r3
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000470 	.word	0x20000470
 8000898:	e000e010 	.word	0xe000e010
 800089c:	2000046c 	.word	0x2000046c

080008a0 <MUSART1_voidInit>:
#include "USART_private.h"
#include "USART_config.h"


void MUSART1_voidInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	/*	baud rate = 115200		*/
	USART1 -> BRR = 0x45;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008a6:	2245      	movs	r2, #69	; 0x45
 80008a8:	609a      	str	r2, [r3, #8]

	SET_BIT((USART1-> CR[0]), 3);			/* Enabling Transmitter */
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008b0:	f043 0308 	orr.w	r3, r3, #8
 80008b4:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1-> CR[0]), 2);			/* Enabling Receiver */
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1-> CR[0]), 13);			/* Enabling USART */
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008cc:	60d3      	str	r3, [r2, #12]

	USART1 -> SR = 0;						/* Clearing status register */
 80008ce:	4b03      	ldr	r3, [pc, #12]	; (80008dc <MUSART1_voidInit+0x3c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40013800 	.word	0x40013800

080008e0 <MUSART1_voidTransmit>:

void MUSART1_voidTransmit(u8 arr[])
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	u8 i = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]
	while(arr[i] != '\0'){
 80008ec:	e010      	b.n	8000910 <MUSART1_voidTransmit+0x30>
		USART1 -> DR = arr[i];
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MUSART1_voidTransmit+0x48>)
 80008f8:	605a      	str	r2, [r3, #4]
		while((GET_BIT((USART1 -> SR), 6)) == 0);
 80008fa:	bf00      	nop
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MUSART1_voidTransmit+0x48>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	099b      	lsrs	r3, r3, #6
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f8      	beq.n	80008fc <MUSART1_voidTransmit+0x1c>
		i++;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3301      	adds	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
	while(arr[i] != '\0'){
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e8      	bne.n	80008ee <MUSART1_voidTransmit+0xe>
	}

}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40013800 	.word	0x40013800

0800092c <MUSART1_u8Receive>:

u8 MUSART1_u8Receive(u32 Copy_u32timeout)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	u32 timeOut=0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]

			u8 Loc_u8ReceivedData = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	72fb      	strb	r3, [r7, #11]
			while((GET_BIT((USART1 -> SR), 5)) == 0)
 800093c:	e009      	b.n	8000952 <MUSART1_u8Receive+0x26>
			{
				timeOut++;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
				if(timeOut==Copy_u32timeout)
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d102      	bne.n	8000952 <MUSART1_u8Receive+0x26>
				{
					Loc_u8ReceivedData = 255; //this var will not reach 255 as max value in ASCII table is 128
 800094c:	23ff      	movs	r3, #255	; 0xff
 800094e:	72fb      	strb	r3, [r7, #11]
					break;
 8000950:	e006      	b.n	8000960 <MUSART1_u8Receive+0x34>
			while((GET_BIT((USART1 -> SR), 5)) == 0)
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MUSART1_u8Receive+0x50>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0ee      	beq.n	800093e <MUSART1_u8Receive+0x12>
				}
			}

				/* If no Errors */
				if( Loc_u8ReceivedData == 0 )
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d103      	bne.n	800096e <MUSART1_u8Receive+0x42>
				{
					return USART1 -> DR;
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <MUSART1_u8Receive+0x50>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	e000      	b.n	8000970 <MUSART1_u8Receive+0x44>
				}
				/* If Error Occurs */
				else
				{

					return Loc_u8ReceivedData;
 800096e:	7afb      	ldrb	r3, [r7, #11]
				}

}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40013800 	.word	0x40013800

08000980 <main>:
#include "USART_interface.h"
#include "Esp_interface.h"


/************** APP functions ************/
void main(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8

	/* Initialize the RCC to HSE */
	RCC_voidInitSysClock();
 8000986:	f7ff ff0f 	bl	80007a8 <RCC_voidInitSysClock>

	//	/* Enable the clock for all ports */
	RCC_voidEnableClock(RCC_APB2, 2);		// Enable clock for GPIOA
 800098a:	2102      	movs	r1, #2
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff ff25 	bl	80007dc <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, 14);		/* Enable USART1 Clock */
 8000992:	210e      	movs	r1, #14
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff ff21 	bl	80007dc <RCC_voidEnableClock>

	//	/* Configure pins for UART */
	/* Setting A9 is the TX pin as Output alternate function push pull w max speed 50 MHz */
	MGPIO_VoidSetPinDirection(GPIOA,PIN9,OUTPUT_SPEED_50MHZ_AFPP);
 800099a:	220b      	movs	r2, #11
 800099c:	2109      	movs	r1, #9
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fdae 	bl	8000500 <MGPIO_VoidSetPinDirection>
	/* Setting A10 is the RX pin as input floating */
	MGPIO_VoidSetPinDirection(GPIOA,PIN10,INPUT_FLOATING);
 80009a4:	2204      	movs	r2, #4
 80009a6:	210a      	movs	r1, #10
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fda9 	bl	8000500 <MGPIO_VoidSetPinDirection>

	//Configure pins for System
	MGPIO_VoidSetPinDirection(GPIOA,PIN0,OUTPUT_SPEED_2MHZ_PP);	//DataLED
 80009ae:	2202      	movs	r2, #2
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fda4 	bl	8000500 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN1,OUTPUT_SPEED_2MHZ_PP);	//ErrorLED
 80009b8:	2202      	movs	r2, #2
 80009ba:	2101      	movs	r1, #1
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fd9f 	bl	8000500 <MGPIO_VoidSetPinDirection>

	//Initialize UART
	MUSART1_voidInit();
 80009c2:	f7ff ff6d 	bl	80008a0 <MUSART1_voidInit>

	// it go through all but it never get OK at first it receive A then 255 (no data)
	// \n didn't transmit
	// check hardware
	/* Configure for WIFI */
	HEsp_voidInit();
 80009c6:	f7ff fbd3 	bl	8000170 <HEsp_voidInit>

	HEsp_voidConnectOnWifi("WE_9A2B93","k6m21723");
 80009ca:	492b      	ldr	r1, [pc, #172]	; (8000a78 <main+0xf8>)
 80009cc:	482b      	ldr	r0, [pc, #172]	; (8000a7c <main+0xfc>)
 80009ce:	f7ff fbf9 	bl	80001c4 <HEsp_voidConnectOnWifi>

	HEsp_voidConnectOnServer("69.197.143.14");
 80009d2:	482b      	ldr	r0, [pc, #172]	; (8000a80 <main+0x100>)
 80009d4:	f7ff fc32 	bl	800023c <HEsp_voidConnectOnServer>

	//GET http://ahmedarm.freevar.com/status.txt  =42 letter + enter & ctr(j) &enter=45
	//u8 Data =HEsp_voidSendData(45,"ahmedarm.freevar.com");
	u8 Data = HEsp_voidSendDataPOST(93,"ahmedarm.freevar.com","haaaa2.php",2,"ok");
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <main+0x104>)
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2302      	movs	r3, #2
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <main+0x108>)
 80009e0:	492a      	ldr	r1, [pc, #168]	; (8000a8c <main+0x10c>)
 80009e2:	205d      	movs	r0, #93	; 0x5d
 80009e4:	f7ff fc64 	bl	80002b0 <HEsp_voidSendDataPOST>
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]



	while(1)
	{
		if(Data!=250)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2bfa      	cmp	r3, #250	; 0xfa
 80009f0:	d0fc      	beq.n	80009ec <main+0x6c>
		{
			if (Data == 95)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b5f      	cmp	r3, #95	; 0x5f
 80009f6:	d117      	bne.n	8000a28 <main+0xa8>
					{
						MGPIO_VoidSetPinValue(GPIOA,PIN1,HIGH);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2101      	movs	r1, #1
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fe57 	bl	80006b0 <MGPIO_VoidSetPinValue>
						MGPIO_VoidSetPinValue(GPIOA,PIN0,LOW);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fe52 	bl	80006b0 <MGPIO_VoidSetPinValue>
						HEsp_voidConnectOnServer("69.197.143.14");
 8000a0c:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x100>)
 8000a0e:	f7ff fc15 	bl	800023c <HEsp_voidConnectOnServer>
						Data = HEsp_voidSendDataPOST(93,"ahmedarm.freevar.com","haaaa2.php",2,"ok");
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <main+0x104>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2302      	movs	r3, #2
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <main+0x108>)
 8000a1a:	491c      	ldr	r1, [pc, #112]	; (8000a8c <main+0x10c>)
 8000a1c:	205d      	movs	r0, #93	; 0x5d
 8000a1e:	f7ff fc47 	bl	80002b0 <HEsp_voidSendDataPOST>
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e7e1      	b.n	80009ec <main+0x6c>
					}
			//didn't stop in last line
			else if (Data == 50)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b32      	cmp	r3, #50	; 0x32
 8000a2c:	d10c      	bne.n	8000a48 <main+0xc8>
					{
						MGPIO_VoidSetPinValue(GPIOA,PIN1,LOW);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2101      	movs	r1, #1
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fe3c 	bl	80006b0 <MGPIO_VoidSetPinValue>
						MGPIO_VoidSetPinValue(GPIOA,PIN0,HIGH);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fe37 	bl	80006b0 <MGPIO_VoidSetPinValue>
						Data=250;
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	e7d1      	b.n	80009ec <main+0x6c>
					}
			else
					{
						MGPIO_VoidSetPinValue(GPIOA,PIN0,LOW);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fe2f 	bl	80006b0 <MGPIO_VoidSetPinValue>
						MGPIO_VoidSetPinValue(GPIOA,PIN1,LOW);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fe2a 	bl	80006b0 <MGPIO_VoidSetPinValue>
						HEsp_voidConnectOnServer("69.197.143.14");
 8000a5c:	4808      	ldr	r0, [pc, #32]	; (8000a80 <main+0x100>)
 8000a5e:	f7ff fbed 	bl	800023c <HEsp_voidConnectOnServer>
						Data = HEsp_voidSendDataPOST(93,"ahmedarm.freevar.com","haaaa2.php",2,"ok");
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <main+0x104>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2302      	movs	r3, #2
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <main+0x108>)
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <main+0x10c>)
 8000a6c:	205d      	movs	r0, #93	; 0x5d
 8000a6e:	f7ff fc1f 	bl	80002b0 <HEsp_voidSendDataPOST>
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
		if(Data!=250)
 8000a76:	e7b9      	b.n	80009ec <main+0x6c>
 8000a78:	0800151c 	.word	0x0800151c
 8000a7c:	08001528 	.word	0x08001528
 8000a80:	08001534 	.word	0x08001534
 8000a84:	08001568 	.word	0x08001568
 8000a88:	08001544 	.word	0x08001544
 8000a8c:	08001550 	.word	0x08001550

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f000 f846 	bl	8000b50 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20005000 	.word	0x20005000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000474 	.word	0x20000474
 8000af8:	20000490 	.word	0x20000490

08000afc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b2a:	f000 f817 	bl	8000b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff ff27 	bl	8000980 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   r0, =_estack
 8000b34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b40:	080015a8 	.word	0x080015a8
  ldr r2, =_sbss
 8000b44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b48:	20000490 	.word	0x20000490

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <__errno>:
 8000b50:	4b01      	ldr	r3, [pc, #4]	; (8000b58 <__errno+0x8>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000004 	.word	0x20000004

08000b5c <__libc_init_array>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	2600      	movs	r6, #0
 8000b60:	4d0c      	ldr	r5, [pc, #48]	; (8000b94 <__libc_init_array+0x38>)
 8000b62:	4c0d      	ldr	r4, [pc, #52]	; (8000b98 <__libc_init_array+0x3c>)
 8000b64:	1b64      	subs	r4, r4, r5
 8000b66:	10a4      	asrs	r4, r4, #2
 8000b68:	42a6      	cmp	r6, r4
 8000b6a:	d109      	bne.n	8000b80 <__libc_init_array+0x24>
 8000b6c:	f000 fc5c 	bl	8001428 <_init>
 8000b70:	2600      	movs	r6, #0
 8000b72:	4d0a      	ldr	r5, [pc, #40]	; (8000b9c <__libc_init_array+0x40>)
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <__libc_init_array+0x44>)
 8000b76:	1b64      	subs	r4, r4, r5
 8000b78:	10a4      	asrs	r4, r4, #2
 8000b7a:	42a6      	cmp	r6, r4
 8000b7c:	d105      	bne.n	8000b8a <__libc_init_array+0x2e>
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
 8000b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b84:	4798      	blx	r3
 8000b86:	3601      	adds	r6, #1
 8000b88:	e7ee      	b.n	8000b68 <__libc_init_array+0xc>
 8000b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b8e:	4798      	blx	r3
 8000b90:	3601      	adds	r6, #1
 8000b92:	e7f2      	b.n	8000b7a <__libc_init_array+0x1e>
 8000b94:	080015a0 	.word	0x080015a0
 8000b98:	080015a0 	.word	0x080015a0
 8000b9c:	080015a0 	.word	0x080015a0
 8000ba0:	080015a4 	.word	0x080015a4

08000ba4 <memset>:
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4402      	add	r2, r0
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d100      	bne.n	8000bae <memset+0xa>
 8000bac:	4770      	bx	lr
 8000bae:	f803 1b01 	strb.w	r1, [r3], #1
 8000bb2:	e7f9      	b.n	8000ba8 <memset+0x4>

08000bb4 <siprintf>:
 8000bb4:	b40e      	push	{r1, r2, r3}
 8000bb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000bba:	b500      	push	{lr}
 8000bbc:	b09c      	sub	sp, #112	; 0x70
 8000bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8000bc0:	9002      	str	r0, [sp, #8]
 8000bc2:	9006      	str	r0, [sp, #24]
 8000bc4:	9107      	str	r1, [sp, #28]
 8000bc6:	9104      	str	r1, [sp, #16]
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <siprintf+0x38>)
 8000bca:	4909      	ldr	r1, [pc, #36]	; (8000bf0 <siprintf+0x3c>)
 8000bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bd0:	9105      	str	r1, [sp, #20]
 8000bd2:	6800      	ldr	r0, [r0, #0]
 8000bd4:	a902      	add	r1, sp, #8
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	f000 f868 	bl	8000cac <_svfiprintf_r>
 8000bdc:	2200      	movs	r2, #0
 8000bde:	9b02      	ldr	r3, [sp, #8]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	b01c      	add	sp, #112	; 0x70
 8000be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000be8:	b003      	add	sp, #12
 8000bea:	4770      	bx	lr
 8000bec:	20000004 	.word	0x20000004
 8000bf0:	ffff0208 	.word	0xffff0208

08000bf4 <__ssputs_r>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	688e      	ldr	r6, [r1, #8]
 8000bfa:	4682      	mov	sl, r0
 8000bfc:	429e      	cmp	r6, r3
 8000bfe:	460c      	mov	r4, r1
 8000c00:	4690      	mov	r8, r2
 8000c02:	461f      	mov	r7, r3
 8000c04:	d838      	bhi.n	8000c78 <__ssputs_r+0x84>
 8000c06:	898a      	ldrh	r2, [r1, #12]
 8000c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000c0c:	d032      	beq.n	8000c74 <__ssputs_r+0x80>
 8000c0e:	6825      	ldr	r5, [r4, #0]
 8000c10:	6909      	ldr	r1, [r1, #16]
 8000c12:	3301      	adds	r3, #1
 8000c14:	eba5 0901 	sub.w	r9, r5, r1
 8000c18:	6965      	ldr	r5, [r4, #20]
 8000c1a:	444b      	add	r3, r9
 8000c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c24:	106d      	asrs	r5, r5, #1
 8000c26:	429d      	cmp	r5, r3
 8000c28:	bf38      	it	cc
 8000c2a:	461d      	movcc	r5, r3
 8000c2c:	0553      	lsls	r3, r2, #21
 8000c2e:	d531      	bpl.n	8000c94 <__ssputs_r+0xa0>
 8000c30:	4629      	mov	r1, r5
 8000c32:	f000 fb53 	bl	80012dc <_malloc_r>
 8000c36:	4606      	mov	r6, r0
 8000c38:	b950      	cbnz	r0, 8000c50 <__ssputs_r+0x5c>
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f8ca 3000 	str.w	r3, [sl]
 8000c44:	89a3      	ldrh	r3, [r4, #12]
 8000c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4a:	81a3      	strh	r3, [r4, #12]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	464a      	mov	r2, r9
 8000c52:	6921      	ldr	r1, [r4, #16]
 8000c54:	f000 face 	bl	80011f4 <memcpy>
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c62:	81a3      	strh	r3, [r4, #12]
 8000c64:	6126      	str	r6, [r4, #16]
 8000c66:	444e      	add	r6, r9
 8000c68:	6026      	str	r6, [r4, #0]
 8000c6a:	463e      	mov	r6, r7
 8000c6c:	6165      	str	r5, [r4, #20]
 8000c6e:	eba5 0509 	sub.w	r5, r5, r9
 8000c72:	60a5      	str	r5, [r4, #8]
 8000c74:	42be      	cmp	r6, r7
 8000c76:	d900      	bls.n	8000c7a <__ssputs_r+0x86>
 8000c78:	463e      	mov	r6, r7
 8000c7a:	4632      	mov	r2, r6
 8000c7c:	4641      	mov	r1, r8
 8000c7e:	6820      	ldr	r0, [r4, #0]
 8000c80:	f000 fac6 	bl	8001210 <memmove>
 8000c84:	68a3      	ldr	r3, [r4, #8]
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	1b9b      	subs	r3, r3, r6
 8000c8a:	4432      	add	r2, r6
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	60a3      	str	r3, [r4, #8]
 8000c90:	6022      	str	r2, [r4, #0]
 8000c92:	e7db      	b.n	8000c4c <__ssputs_r+0x58>
 8000c94:	462a      	mov	r2, r5
 8000c96:	f000 fb7b 	bl	8001390 <_realloc_r>
 8000c9a:	4606      	mov	r6, r0
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d1e1      	bne.n	8000c64 <__ssputs_r+0x70>
 8000ca0:	4650      	mov	r0, sl
 8000ca2:	6921      	ldr	r1, [r4, #16]
 8000ca4:	f000 face 	bl	8001244 <_free_r>
 8000ca8:	e7c7      	b.n	8000c3a <__ssputs_r+0x46>
	...

08000cac <_svfiprintf_r>:
 8000cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	898b      	ldrh	r3, [r1, #12]
 8000cb4:	4607      	mov	r7, r0
 8000cb6:	061b      	lsls	r3, r3, #24
 8000cb8:	460d      	mov	r5, r1
 8000cba:	4614      	mov	r4, r2
 8000cbc:	b09d      	sub	sp, #116	; 0x74
 8000cbe:	d50e      	bpl.n	8000cde <_svfiprintf_r+0x32>
 8000cc0:	690b      	ldr	r3, [r1, #16]
 8000cc2:	b963      	cbnz	r3, 8000cde <_svfiprintf_r+0x32>
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	f000 fb09 	bl	80012dc <_malloc_r>
 8000cca:	6028      	str	r0, [r5, #0]
 8000ccc:	6128      	str	r0, [r5, #16]
 8000cce:	b920      	cbnz	r0, 8000cda <_svfiprintf_r+0x2e>
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	e0d1      	b.n	8000e7e <_svfiprintf_r+0x1d2>
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	616b      	str	r3, [r5, #20]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ce2:	2320      	movs	r3, #32
 8000ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ce8:	2330      	movs	r3, #48	; 0x30
 8000cea:	f04f 0901 	mov.w	r9, #1
 8000cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000e98 <_svfiprintf_r+0x1ec>
 8000cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	469a      	mov	sl, r3
 8000cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d02:	b10a      	cbz	r2, 8000d08 <_svfiprintf_r+0x5c>
 8000d04:	2a25      	cmp	r2, #37	; 0x25
 8000d06:	d1f9      	bne.n	8000cfc <_svfiprintf_r+0x50>
 8000d08:	ebba 0b04 	subs.w	fp, sl, r4
 8000d0c:	d00b      	beq.n	8000d26 <_svfiprintf_r+0x7a>
 8000d0e:	465b      	mov	r3, fp
 8000d10:	4622      	mov	r2, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	4638      	mov	r0, r7
 8000d16:	f7ff ff6d 	bl	8000bf4 <__ssputs_r>
 8000d1a:	3001      	adds	r0, #1
 8000d1c:	f000 80aa 	beq.w	8000e74 <_svfiprintf_r+0x1c8>
 8000d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d22:	445a      	add	r2, fp
 8000d24:	9209      	str	r2, [sp, #36]	; 0x24
 8000d26:	f89a 3000 	ldrb.w	r3, [sl]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 80a2 	beq.w	8000e74 <_svfiprintf_r+0x1c8>
 8000d30:	2300      	movs	r3, #0
 8000d32:	f04f 32ff 	mov.w	r2, #4294967295
 8000d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d3a:	f10a 0a01 	add.w	sl, sl, #1
 8000d3e:	9304      	str	r3, [sp, #16]
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d46:	931a      	str	r3, [sp, #104]	; 0x68
 8000d48:	4654      	mov	r4, sl
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d50:	4851      	ldr	r0, [pc, #324]	; (8000e98 <_svfiprintf_r+0x1ec>)
 8000d52:	f000 fa41 	bl	80011d8 <memchr>
 8000d56:	9a04      	ldr	r2, [sp, #16]
 8000d58:	b9d8      	cbnz	r0, 8000d92 <_svfiprintf_r+0xe6>
 8000d5a:	06d0      	lsls	r0, r2, #27
 8000d5c:	bf44      	itt	mi
 8000d5e:	2320      	movmi	r3, #32
 8000d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d64:	0711      	lsls	r1, r2, #28
 8000d66:	bf44      	itt	mi
 8000d68:	232b      	movmi	r3, #43	; 0x2b
 8000d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d72:	2b2a      	cmp	r3, #42	; 0x2a
 8000d74:	d015      	beq.n	8000da2 <_svfiprintf_r+0xf6>
 8000d76:	4654      	mov	r4, sl
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f04f 0c0a 	mov.w	ip, #10
 8000d7e:	9a07      	ldr	r2, [sp, #28]
 8000d80:	4621      	mov	r1, r4
 8000d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d94e      	bls.n	8000e2a <_svfiprintf_r+0x17e>
 8000d8c:	b1b0      	cbz	r0, 8000dbc <_svfiprintf_r+0x110>
 8000d8e:	9207      	str	r2, [sp, #28]
 8000d90:	e014      	b.n	8000dbc <_svfiprintf_r+0x110>
 8000d92:	eba0 0308 	sub.w	r3, r0, r8
 8000d96:	fa09 f303 	lsl.w	r3, r9, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	9304      	str	r3, [sp, #16]
 8000da0:	e7d2      	b.n	8000d48 <_svfiprintf_r+0x9c>
 8000da2:	9b03      	ldr	r3, [sp, #12]
 8000da4:	1d19      	adds	r1, r3, #4
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	9103      	str	r1, [sp, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfbb      	ittet	lt
 8000dae:	425b      	neglt	r3, r3
 8000db0:	f042 0202 	orrlt.w	r2, r2, #2
 8000db4:	9307      	strge	r3, [sp, #28]
 8000db6:	9307      	strlt	r3, [sp, #28]
 8000db8:	bfb8      	it	lt
 8000dba:	9204      	strlt	r2, [sp, #16]
 8000dbc:	7823      	ldrb	r3, [r4, #0]
 8000dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8000dc0:	d10c      	bne.n	8000ddc <_svfiprintf_r+0x130>
 8000dc2:	7863      	ldrb	r3, [r4, #1]
 8000dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8000dc6:	d135      	bne.n	8000e34 <_svfiprintf_r+0x188>
 8000dc8:	9b03      	ldr	r3, [sp, #12]
 8000dca:	3402      	adds	r4, #2
 8000dcc:	1d1a      	adds	r2, r3, #4
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	9203      	str	r2, [sp, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bfb8      	it	lt
 8000dd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8000dda:	9305      	str	r3, [sp, #20]
 8000ddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ea8 <_svfiprintf_r+0x1fc>
 8000de0:	2203      	movs	r2, #3
 8000de2:	4650      	mov	r0, sl
 8000de4:	7821      	ldrb	r1, [r4, #0]
 8000de6:	f000 f9f7 	bl	80011d8 <memchr>
 8000dea:	b140      	cbz	r0, 8000dfe <_svfiprintf_r+0x152>
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	eba0 000a 	sub.w	r0, r0, sl
 8000df2:	fa03 f000 	lsl.w	r0, r3, r0
 8000df6:	9b04      	ldr	r3, [sp, #16]
 8000df8:	3401      	adds	r4, #1
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e02:	2206      	movs	r2, #6
 8000e04:	4825      	ldr	r0, [pc, #148]	; (8000e9c <_svfiprintf_r+0x1f0>)
 8000e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e0a:	f000 f9e5 	bl	80011d8 <memchr>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d038      	beq.n	8000e84 <_svfiprintf_r+0x1d8>
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <_svfiprintf_r+0x1f4>)
 8000e14:	bb1b      	cbnz	r3, 8000e5e <_svfiprintf_r+0x1b2>
 8000e16:	9b03      	ldr	r3, [sp, #12]
 8000e18:	3307      	adds	r3, #7
 8000e1a:	f023 0307 	bic.w	r3, r3, #7
 8000e1e:	3308      	adds	r3, #8
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e24:	4433      	add	r3, r6
 8000e26:	9309      	str	r3, [sp, #36]	; 0x24
 8000e28:	e767      	b.n	8000cfa <_svfiprintf_r+0x4e>
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e32:	e7a5      	b.n	8000d80 <_svfiprintf_r+0xd4>
 8000e34:	2300      	movs	r3, #0
 8000e36:	f04f 0c0a 	mov.w	ip, #10
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	3401      	adds	r4, #1
 8000e3e:	9305      	str	r3, [sp, #20]
 8000e40:	4620      	mov	r0, r4
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	3a30      	subs	r2, #48	; 0x30
 8000e48:	2a09      	cmp	r2, #9
 8000e4a:	d903      	bls.n	8000e54 <_svfiprintf_r+0x1a8>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0c5      	beq.n	8000ddc <_svfiprintf_r+0x130>
 8000e50:	9105      	str	r1, [sp, #20]
 8000e52:	e7c3      	b.n	8000ddc <_svfiprintf_r+0x130>
 8000e54:	4604      	mov	r4, r0
 8000e56:	2301      	movs	r3, #1
 8000e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e5c:	e7f0      	b.n	8000e40 <_svfiprintf_r+0x194>
 8000e5e:	ab03      	add	r3, sp, #12
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	462a      	mov	r2, r5
 8000e64:	4638      	mov	r0, r7
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <_svfiprintf_r+0x1f8>)
 8000e68:	a904      	add	r1, sp, #16
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	1c42      	adds	r2, r0, #1
 8000e70:	4606      	mov	r6, r0
 8000e72:	d1d6      	bne.n	8000e22 <_svfiprintf_r+0x176>
 8000e74:	89ab      	ldrh	r3, [r5, #12]
 8000e76:	065b      	lsls	r3, r3, #25
 8000e78:	f53f af2c 	bmi.w	8000cd4 <_svfiprintf_r+0x28>
 8000e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e7e:	b01d      	add	sp, #116	; 0x74
 8000e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e84:	ab03      	add	r3, sp, #12
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	462a      	mov	r2, r5
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_svfiprintf_r+0x1f8>)
 8000e8e:	a904      	add	r1, sp, #16
 8000e90:	f000 f87c 	bl	8000f8c <_printf_i>
 8000e94:	e7eb      	b.n	8000e6e <_svfiprintf_r+0x1c2>
 8000e96:	bf00      	nop
 8000e98:	0800156b 	.word	0x0800156b
 8000e9c:	08001575 	.word	0x08001575
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	08000bf5 	.word	0x08000bf5
 8000ea8:	08001571 	.word	0x08001571

08000eac <_printf_common>:
 8000eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb0:	4616      	mov	r6, r2
 8000eb2:	4699      	mov	r9, r3
 8000eb4:	688a      	ldr	r2, [r1, #8]
 8000eb6:	690b      	ldr	r3, [r1, #16]
 8000eb8:	4607      	mov	r7, r0
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	bfb8      	it	lt
 8000ebe:	4613      	movlt	r3, r2
 8000ec0:	6033      	str	r3, [r6, #0]
 8000ec2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ecc:	b10a      	cbz	r2, 8000ed2 <_printf_common+0x26>
 8000ece:	3301      	adds	r3, #1
 8000ed0:	6033      	str	r3, [r6, #0]
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	0699      	lsls	r1, r3, #26
 8000ed6:	bf42      	ittt	mi
 8000ed8:	6833      	ldrmi	r3, [r6, #0]
 8000eda:	3302      	addmi	r3, #2
 8000edc:	6033      	strmi	r3, [r6, #0]
 8000ede:	6825      	ldr	r5, [r4, #0]
 8000ee0:	f015 0506 	ands.w	r5, r5, #6
 8000ee4:	d106      	bne.n	8000ef4 <_printf_common+0x48>
 8000ee6:	f104 0a19 	add.w	sl, r4, #25
 8000eea:	68e3      	ldr	r3, [r4, #12]
 8000eec:	6832      	ldr	r2, [r6, #0]
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	42ab      	cmp	r3, r5
 8000ef2:	dc28      	bgt.n	8000f46 <_printf_common+0x9a>
 8000ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ef8:	1e13      	subs	r3, r2, #0
 8000efa:	6822      	ldr	r2, [r4, #0]
 8000efc:	bf18      	it	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	0692      	lsls	r2, r2, #26
 8000f02:	d42d      	bmi.n	8000f60 <_printf_common+0xb4>
 8000f04:	4649      	mov	r1, r9
 8000f06:	4638      	mov	r0, r7
 8000f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f0c:	47c0      	blx	r8
 8000f0e:	3001      	adds	r0, #1
 8000f10:	d020      	beq.n	8000f54 <_printf_common+0xa8>
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	68e5      	ldr	r5, [r4, #12]
 8000f16:	f003 0306 	and.w	r3, r3, #6
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf18      	it	ne
 8000f1e:	2500      	movne	r5, #0
 8000f20:	6832      	ldr	r2, [r6, #0]
 8000f22:	f04f 0600 	mov.w	r6, #0
 8000f26:	68a3      	ldr	r3, [r4, #8]
 8000f28:	bf08      	it	eq
 8000f2a:	1aad      	subeq	r5, r5, r2
 8000f2c:	6922      	ldr	r2, [r4, #16]
 8000f2e:	bf08      	it	eq
 8000f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f34:	4293      	cmp	r3, r2
 8000f36:	bfc4      	itt	gt
 8000f38:	1a9b      	subgt	r3, r3, r2
 8000f3a:	18ed      	addgt	r5, r5, r3
 8000f3c:	341a      	adds	r4, #26
 8000f3e:	42b5      	cmp	r5, r6
 8000f40:	d11a      	bne.n	8000f78 <_printf_common+0xcc>
 8000f42:	2000      	movs	r0, #0
 8000f44:	e008      	b.n	8000f58 <_printf_common+0xac>
 8000f46:	2301      	movs	r3, #1
 8000f48:	4652      	mov	r2, sl
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	47c0      	blx	r8
 8000f50:	3001      	adds	r0, #1
 8000f52:	d103      	bne.n	8000f5c <_printf_common+0xb0>
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5c:	3501      	adds	r5, #1
 8000f5e:	e7c4      	b.n	8000eea <_printf_common+0x3e>
 8000f60:	2030      	movs	r0, #48	; 0x30
 8000f62:	18e1      	adds	r1, r4, r3
 8000f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f6e:	4422      	add	r2, r4
 8000f70:	3302      	adds	r3, #2
 8000f72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f76:	e7c5      	b.n	8000f04 <_printf_common+0x58>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	4638      	mov	r0, r7
 8000f80:	47c0      	blx	r8
 8000f82:	3001      	adds	r0, #1
 8000f84:	d0e6      	beq.n	8000f54 <_printf_common+0xa8>
 8000f86:	3601      	adds	r6, #1
 8000f88:	e7d9      	b.n	8000f3e <_printf_common+0x92>
	...

08000f8c <_printf_i>:
 8000f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f90:	460c      	mov	r4, r1
 8000f92:	7e27      	ldrb	r7, [r4, #24]
 8000f94:	4691      	mov	r9, r2
 8000f96:	2f78      	cmp	r7, #120	; 0x78
 8000f98:	4680      	mov	r8, r0
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fa2:	d807      	bhi.n	8000fb4 <_printf_i+0x28>
 8000fa4:	2f62      	cmp	r7, #98	; 0x62
 8000fa6:	d80a      	bhi.n	8000fbe <_printf_i+0x32>
 8000fa8:	2f00      	cmp	r7, #0
 8000faa:	f000 80d9 	beq.w	8001160 <_printf_i+0x1d4>
 8000fae:	2f58      	cmp	r7, #88	; 0x58
 8000fb0:	f000 80a4 	beq.w	80010fc <_printf_i+0x170>
 8000fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000fbc:	e03a      	b.n	8001034 <_printf_i+0xa8>
 8000fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000fc2:	2b15      	cmp	r3, #21
 8000fc4:	d8f6      	bhi.n	8000fb4 <_printf_i+0x28>
 8000fc6:	a001      	add	r0, pc, #4	; (adr r0, 8000fcc <_printf_i+0x40>)
 8000fc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000fcc:	08001025 	.word	0x08001025
 8000fd0:	08001039 	.word	0x08001039
 8000fd4:	08000fb5 	.word	0x08000fb5
 8000fd8:	08000fb5 	.word	0x08000fb5
 8000fdc:	08000fb5 	.word	0x08000fb5
 8000fe0:	08000fb5 	.word	0x08000fb5
 8000fe4:	08001039 	.word	0x08001039
 8000fe8:	08000fb5 	.word	0x08000fb5
 8000fec:	08000fb5 	.word	0x08000fb5
 8000ff0:	08000fb5 	.word	0x08000fb5
 8000ff4:	08000fb5 	.word	0x08000fb5
 8000ff8:	08001147 	.word	0x08001147
 8000ffc:	08001069 	.word	0x08001069
 8001000:	08001129 	.word	0x08001129
 8001004:	08000fb5 	.word	0x08000fb5
 8001008:	08000fb5 	.word	0x08000fb5
 800100c:	08001169 	.word	0x08001169
 8001010:	08000fb5 	.word	0x08000fb5
 8001014:	08001069 	.word	0x08001069
 8001018:	08000fb5 	.word	0x08000fb5
 800101c:	08000fb5 	.word	0x08000fb5
 8001020:	08001131 	.word	0x08001131
 8001024:	680b      	ldr	r3, [r1, #0]
 8001026:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	600a      	str	r2, [r1, #0]
 8001030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001034:	2301      	movs	r3, #1
 8001036:	e0a4      	b.n	8001182 <_printf_i+0x1f6>
 8001038:	6825      	ldr	r5, [r4, #0]
 800103a:	6808      	ldr	r0, [r1, #0]
 800103c:	062e      	lsls	r6, r5, #24
 800103e:	f100 0304 	add.w	r3, r0, #4
 8001042:	d50a      	bpl.n	800105a <_printf_i+0xce>
 8001044:	6805      	ldr	r5, [r0, #0]
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	2d00      	cmp	r5, #0
 800104a:	da03      	bge.n	8001054 <_printf_i+0xc8>
 800104c:	232d      	movs	r3, #45	; 0x2d
 800104e:	426d      	negs	r5, r5
 8001050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001054:	230a      	movs	r3, #10
 8001056:	485e      	ldr	r0, [pc, #376]	; (80011d0 <_printf_i+0x244>)
 8001058:	e019      	b.n	800108e <_printf_i+0x102>
 800105a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800105e:	6805      	ldr	r5, [r0, #0]
 8001060:	600b      	str	r3, [r1, #0]
 8001062:	bf18      	it	ne
 8001064:	b22d      	sxthne	r5, r5
 8001066:	e7ef      	b.n	8001048 <_printf_i+0xbc>
 8001068:	680b      	ldr	r3, [r1, #0]
 800106a:	6825      	ldr	r5, [r4, #0]
 800106c:	1d18      	adds	r0, r3, #4
 800106e:	6008      	str	r0, [r1, #0]
 8001070:	0628      	lsls	r0, r5, #24
 8001072:	d501      	bpl.n	8001078 <_printf_i+0xec>
 8001074:	681d      	ldr	r5, [r3, #0]
 8001076:	e002      	b.n	800107e <_printf_i+0xf2>
 8001078:	0669      	lsls	r1, r5, #25
 800107a:	d5fb      	bpl.n	8001074 <_printf_i+0xe8>
 800107c:	881d      	ldrh	r5, [r3, #0]
 800107e:	2f6f      	cmp	r7, #111	; 0x6f
 8001080:	bf0c      	ite	eq
 8001082:	2308      	moveq	r3, #8
 8001084:	230a      	movne	r3, #10
 8001086:	4852      	ldr	r0, [pc, #328]	; (80011d0 <_printf_i+0x244>)
 8001088:	2100      	movs	r1, #0
 800108a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800108e:	6866      	ldr	r6, [r4, #4]
 8001090:	2e00      	cmp	r6, #0
 8001092:	bfa8      	it	ge
 8001094:	6821      	ldrge	r1, [r4, #0]
 8001096:	60a6      	str	r6, [r4, #8]
 8001098:	bfa4      	itt	ge
 800109a:	f021 0104 	bicge.w	r1, r1, #4
 800109e:	6021      	strge	r1, [r4, #0]
 80010a0:	b90d      	cbnz	r5, 80010a6 <_printf_i+0x11a>
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d04d      	beq.n	8001142 <_printf_i+0x1b6>
 80010a6:	4616      	mov	r6, r2
 80010a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80010ac:	fb03 5711 	mls	r7, r3, r1, r5
 80010b0:	5dc7      	ldrb	r7, [r0, r7]
 80010b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010b6:	462f      	mov	r7, r5
 80010b8:	42bb      	cmp	r3, r7
 80010ba:	460d      	mov	r5, r1
 80010bc:	d9f4      	bls.n	80010a8 <_printf_i+0x11c>
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d10b      	bne.n	80010da <_printf_i+0x14e>
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	07df      	lsls	r7, r3, #31
 80010c6:	d508      	bpl.n	80010da <_printf_i+0x14e>
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	6861      	ldr	r1, [r4, #4]
 80010cc:	4299      	cmp	r1, r3
 80010ce:	bfde      	ittt	le
 80010d0:	2330      	movle	r3, #48	; 0x30
 80010d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010da:	1b92      	subs	r2, r2, r6
 80010dc:	6122      	str	r2, [r4, #16]
 80010de:	464b      	mov	r3, r9
 80010e0:	4621      	mov	r1, r4
 80010e2:	4640      	mov	r0, r8
 80010e4:	f8cd a000 	str.w	sl, [sp]
 80010e8:	aa03      	add	r2, sp, #12
 80010ea:	f7ff fedf 	bl	8000eac <_printf_common>
 80010ee:	3001      	adds	r0, #1
 80010f0:	d14c      	bne.n	800118c <_printf_i+0x200>
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	b004      	add	sp, #16
 80010f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fc:	4834      	ldr	r0, [pc, #208]	; (80011d0 <_printf_i+0x244>)
 80010fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001102:	680e      	ldr	r6, [r1, #0]
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	f856 5b04 	ldr.w	r5, [r6], #4
 800110a:	061f      	lsls	r7, r3, #24
 800110c:	600e      	str	r6, [r1, #0]
 800110e:	d514      	bpl.n	800113a <_printf_i+0x1ae>
 8001110:	07d9      	lsls	r1, r3, #31
 8001112:	bf44      	itt	mi
 8001114:	f043 0320 	orrmi.w	r3, r3, #32
 8001118:	6023      	strmi	r3, [r4, #0]
 800111a:	b91d      	cbnz	r5, 8001124 <_printf_i+0x198>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f023 0320 	bic.w	r3, r3, #32
 8001122:	6023      	str	r3, [r4, #0]
 8001124:	2310      	movs	r3, #16
 8001126:	e7af      	b.n	8001088 <_printf_i+0xfc>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	f043 0320 	orr.w	r3, r3, #32
 800112e:	6023      	str	r3, [r4, #0]
 8001130:	2378      	movs	r3, #120	; 0x78
 8001132:	4828      	ldr	r0, [pc, #160]	; (80011d4 <_printf_i+0x248>)
 8001134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001138:	e7e3      	b.n	8001102 <_printf_i+0x176>
 800113a:	065e      	lsls	r6, r3, #25
 800113c:	bf48      	it	mi
 800113e:	b2ad      	uxthmi	r5, r5
 8001140:	e7e6      	b.n	8001110 <_printf_i+0x184>
 8001142:	4616      	mov	r6, r2
 8001144:	e7bb      	b.n	80010be <_printf_i+0x132>
 8001146:	680b      	ldr	r3, [r1, #0]
 8001148:	6826      	ldr	r6, [r4, #0]
 800114a:	1d1d      	adds	r5, r3, #4
 800114c:	6960      	ldr	r0, [r4, #20]
 800114e:	600d      	str	r5, [r1, #0]
 8001150:	0635      	lsls	r5, r6, #24
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	d501      	bpl.n	800115a <_printf_i+0x1ce>
 8001156:	6018      	str	r0, [r3, #0]
 8001158:	e002      	b.n	8001160 <_printf_i+0x1d4>
 800115a:	0671      	lsls	r1, r6, #25
 800115c:	d5fb      	bpl.n	8001156 <_printf_i+0x1ca>
 800115e:	8018      	strh	r0, [r3, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	4616      	mov	r6, r2
 8001164:	6123      	str	r3, [r4, #16]
 8001166:	e7ba      	b.n	80010de <_printf_i+0x152>
 8001168:	680b      	ldr	r3, [r1, #0]
 800116a:	1d1a      	adds	r2, r3, #4
 800116c:	600a      	str	r2, [r1, #0]
 800116e:	681e      	ldr	r6, [r3, #0]
 8001170:	2100      	movs	r1, #0
 8001172:	4630      	mov	r0, r6
 8001174:	6862      	ldr	r2, [r4, #4]
 8001176:	f000 f82f 	bl	80011d8 <memchr>
 800117a:	b108      	cbz	r0, 8001180 <_printf_i+0x1f4>
 800117c:	1b80      	subs	r0, r0, r6
 800117e:	6060      	str	r0, [r4, #4]
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	6123      	str	r3, [r4, #16]
 8001184:	2300      	movs	r3, #0
 8001186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800118a:	e7a8      	b.n	80010de <_printf_i+0x152>
 800118c:	4632      	mov	r2, r6
 800118e:	4649      	mov	r1, r9
 8001190:	4640      	mov	r0, r8
 8001192:	6923      	ldr	r3, [r4, #16]
 8001194:	47d0      	blx	sl
 8001196:	3001      	adds	r0, #1
 8001198:	d0ab      	beq.n	80010f2 <_printf_i+0x166>
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	079b      	lsls	r3, r3, #30
 800119e:	d413      	bmi.n	80011c8 <_printf_i+0x23c>
 80011a0:	68e0      	ldr	r0, [r4, #12]
 80011a2:	9b03      	ldr	r3, [sp, #12]
 80011a4:	4298      	cmp	r0, r3
 80011a6:	bfb8      	it	lt
 80011a8:	4618      	movlt	r0, r3
 80011aa:	e7a4      	b.n	80010f6 <_printf_i+0x16a>
 80011ac:	2301      	movs	r3, #1
 80011ae:	4632      	mov	r2, r6
 80011b0:	4649      	mov	r1, r9
 80011b2:	4640      	mov	r0, r8
 80011b4:	47d0      	blx	sl
 80011b6:	3001      	adds	r0, #1
 80011b8:	d09b      	beq.n	80010f2 <_printf_i+0x166>
 80011ba:	3501      	adds	r5, #1
 80011bc:	68e3      	ldr	r3, [r4, #12]
 80011be:	9903      	ldr	r1, [sp, #12]
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	42ab      	cmp	r3, r5
 80011c4:	dcf2      	bgt.n	80011ac <_printf_i+0x220>
 80011c6:	e7eb      	b.n	80011a0 <_printf_i+0x214>
 80011c8:	2500      	movs	r5, #0
 80011ca:	f104 0619 	add.w	r6, r4, #25
 80011ce:	e7f5      	b.n	80011bc <_printf_i+0x230>
 80011d0:	0800157c 	.word	0x0800157c
 80011d4:	0800158d 	.word	0x0800158d

080011d8 <memchr>:
 80011d8:	4603      	mov	r3, r0
 80011da:	b510      	push	{r4, lr}
 80011dc:	b2c9      	uxtb	r1, r1
 80011de:	4402      	add	r2, r0
 80011e0:	4293      	cmp	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	d101      	bne.n	80011ea <memchr+0x12>
 80011e6:	2000      	movs	r0, #0
 80011e8:	e003      	b.n	80011f2 <memchr+0x1a>
 80011ea:	7804      	ldrb	r4, [r0, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	428c      	cmp	r4, r1
 80011f0:	d1f6      	bne.n	80011e0 <memchr+0x8>
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <memcpy>:
 80011f4:	440a      	add	r2, r1
 80011f6:	4291      	cmp	r1, r2
 80011f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80011fc:	d100      	bne.n	8001200 <memcpy+0xc>
 80011fe:	4770      	bx	lr
 8001200:	b510      	push	{r4, lr}
 8001202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001206:	4291      	cmp	r1, r2
 8001208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800120c:	d1f9      	bne.n	8001202 <memcpy+0xe>
 800120e:	bd10      	pop	{r4, pc}

08001210 <memmove>:
 8001210:	4288      	cmp	r0, r1
 8001212:	b510      	push	{r4, lr}
 8001214:	eb01 0402 	add.w	r4, r1, r2
 8001218:	d902      	bls.n	8001220 <memmove+0x10>
 800121a:	4284      	cmp	r4, r0
 800121c:	4623      	mov	r3, r4
 800121e:	d807      	bhi.n	8001230 <memmove+0x20>
 8001220:	1e43      	subs	r3, r0, #1
 8001222:	42a1      	cmp	r1, r4
 8001224:	d008      	beq.n	8001238 <memmove+0x28>
 8001226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800122a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800122e:	e7f8      	b.n	8001222 <memmove+0x12>
 8001230:	4601      	mov	r1, r0
 8001232:	4402      	add	r2, r0
 8001234:	428a      	cmp	r2, r1
 8001236:	d100      	bne.n	800123a <memmove+0x2a>
 8001238:	bd10      	pop	{r4, pc}
 800123a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800123e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001242:	e7f7      	b.n	8001234 <memmove+0x24>

08001244 <_free_r>:
 8001244:	b538      	push	{r3, r4, r5, lr}
 8001246:	4605      	mov	r5, r0
 8001248:	2900      	cmp	r1, #0
 800124a:	d043      	beq.n	80012d4 <_free_r+0x90>
 800124c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001250:	1f0c      	subs	r4, r1, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfb8      	it	lt
 8001256:	18e4      	addlt	r4, r4, r3
 8001258:	f000 f8d0 	bl	80013fc <__malloc_lock>
 800125c:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <_free_r+0x94>)
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	4610      	mov	r0, r2
 8001262:	b933      	cbnz	r3, 8001272 <_free_r+0x2e>
 8001264:	6063      	str	r3, [r4, #4]
 8001266:	6014      	str	r4, [r2, #0]
 8001268:	4628      	mov	r0, r5
 800126a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800126e:	f000 b8cb 	b.w	8001408 <__malloc_unlock>
 8001272:	42a3      	cmp	r3, r4
 8001274:	d90a      	bls.n	800128c <_free_r+0x48>
 8001276:	6821      	ldr	r1, [r4, #0]
 8001278:	1862      	adds	r2, r4, r1
 800127a:	4293      	cmp	r3, r2
 800127c:	bf01      	itttt	eq
 800127e:	681a      	ldreq	r2, [r3, #0]
 8001280:	685b      	ldreq	r3, [r3, #4]
 8001282:	1852      	addeq	r2, r2, r1
 8001284:	6022      	streq	r2, [r4, #0]
 8001286:	6063      	str	r3, [r4, #4]
 8001288:	6004      	str	r4, [r0, #0]
 800128a:	e7ed      	b.n	8001268 <_free_r+0x24>
 800128c:	461a      	mov	r2, r3
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	b10b      	cbz	r3, 8001296 <_free_r+0x52>
 8001292:	42a3      	cmp	r3, r4
 8001294:	d9fa      	bls.n	800128c <_free_r+0x48>
 8001296:	6811      	ldr	r1, [r2, #0]
 8001298:	1850      	adds	r0, r2, r1
 800129a:	42a0      	cmp	r0, r4
 800129c:	d10b      	bne.n	80012b6 <_free_r+0x72>
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	4401      	add	r1, r0
 80012a2:	1850      	adds	r0, r2, r1
 80012a4:	4283      	cmp	r3, r0
 80012a6:	6011      	str	r1, [r2, #0]
 80012a8:	d1de      	bne.n	8001268 <_free_r+0x24>
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4401      	add	r1, r0
 80012b0:	6011      	str	r1, [r2, #0]
 80012b2:	6053      	str	r3, [r2, #4]
 80012b4:	e7d8      	b.n	8001268 <_free_r+0x24>
 80012b6:	d902      	bls.n	80012be <_free_r+0x7a>
 80012b8:	230c      	movs	r3, #12
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	e7d4      	b.n	8001268 <_free_r+0x24>
 80012be:	6820      	ldr	r0, [r4, #0]
 80012c0:	1821      	adds	r1, r4, r0
 80012c2:	428b      	cmp	r3, r1
 80012c4:	bf01      	itttt	eq
 80012c6:	6819      	ldreq	r1, [r3, #0]
 80012c8:	685b      	ldreq	r3, [r3, #4]
 80012ca:	1809      	addeq	r1, r1, r0
 80012cc:	6021      	streq	r1, [r4, #0]
 80012ce:	6063      	str	r3, [r4, #4]
 80012d0:	6054      	str	r4, [r2, #4]
 80012d2:	e7c9      	b.n	8001268 <_free_r+0x24>
 80012d4:	bd38      	pop	{r3, r4, r5, pc}
 80012d6:	bf00      	nop
 80012d8:	20000478 	.word	0x20000478

080012dc <_malloc_r>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	1ccd      	adds	r5, r1, #3
 80012e0:	f025 0503 	bic.w	r5, r5, #3
 80012e4:	3508      	adds	r5, #8
 80012e6:	2d0c      	cmp	r5, #12
 80012e8:	bf38      	it	cc
 80012ea:	250c      	movcc	r5, #12
 80012ec:	2d00      	cmp	r5, #0
 80012ee:	4606      	mov	r6, r0
 80012f0:	db01      	blt.n	80012f6 <_malloc_r+0x1a>
 80012f2:	42a9      	cmp	r1, r5
 80012f4:	d903      	bls.n	80012fe <_malloc_r+0x22>
 80012f6:	230c      	movs	r3, #12
 80012f8:	6033      	str	r3, [r6, #0]
 80012fa:	2000      	movs	r0, #0
 80012fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fe:	f000 f87d 	bl	80013fc <__malloc_lock>
 8001302:	4921      	ldr	r1, [pc, #132]	; (8001388 <_malloc_r+0xac>)
 8001304:	680a      	ldr	r2, [r1, #0]
 8001306:	4614      	mov	r4, r2
 8001308:	b99c      	cbnz	r4, 8001332 <_malloc_r+0x56>
 800130a:	4f20      	ldr	r7, [pc, #128]	; (800138c <_malloc_r+0xb0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b923      	cbnz	r3, 800131a <_malloc_r+0x3e>
 8001310:	4621      	mov	r1, r4
 8001312:	4630      	mov	r0, r6
 8001314:	f000 f862 	bl	80013dc <_sbrk_r>
 8001318:	6038      	str	r0, [r7, #0]
 800131a:	4629      	mov	r1, r5
 800131c:	4630      	mov	r0, r6
 800131e:	f000 f85d 	bl	80013dc <_sbrk_r>
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	d123      	bne.n	800136e <_malloc_r+0x92>
 8001326:	230c      	movs	r3, #12
 8001328:	4630      	mov	r0, r6
 800132a:	6033      	str	r3, [r6, #0]
 800132c:	f000 f86c 	bl	8001408 <__malloc_unlock>
 8001330:	e7e3      	b.n	80012fa <_malloc_r+0x1e>
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	1b5b      	subs	r3, r3, r5
 8001336:	d417      	bmi.n	8001368 <_malloc_r+0x8c>
 8001338:	2b0b      	cmp	r3, #11
 800133a:	d903      	bls.n	8001344 <_malloc_r+0x68>
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	441c      	add	r4, r3
 8001340:	6025      	str	r5, [r4, #0]
 8001342:	e004      	b.n	800134e <_malloc_r+0x72>
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	42a2      	cmp	r2, r4
 8001348:	bf0c      	ite	eq
 800134a:	600b      	streq	r3, [r1, #0]
 800134c:	6053      	strne	r3, [r2, #4]
 800134e:	4630      	mov	r0, r6
 8001350:	f000 f85a 	bl	8001408 <__malloc_unlock>
 8001354:	f104 000b 	add.w	r0, r4, #11
 8001358:	1d23      	adds	r3, r4, #4
 800135a:	f020 0007 	bic.w	r0, r0, #7
 800135e:	1ac2      	subs	r2, r0, r3
 8001360:	d0cc      	beq.n	80012fc <_malloc_r+0x20>
 8001362:	1a1b      	subs	r3, r3, r0
 8001364:	50a3      	str	r3, [r4, r2]
 8001366:	e7c9      	b.n	80012fc <_malloc_r+0x20>
 8001368:	4622      	mov	r2, r4
 800136a:	6864      	ldr	r4, [r4, #4]
 800136c:	e7cc      	b.n	8001308 <_malloc_r+0x2c>
 800136e:	1cc4      	adds	r4, r0, #3
 8001370:	f024 0403 	bic.w	r4, r4, #3
 8001374:	42a0      	cmp	r0, r4
 8001376:	d0e3      	beq.n	8001340 <_malloc_r+0x64>
 8001378:	1a21      	subs	r1, r4, r0
 800137a:	4630      	mov	r0, r6
 800137c:	f000 f82e 	bl	80013dc <_sbrk_r>
 8001380:	3001      	adds	r0, #1
 8001382:	d1dd      	bne.n	8001340 <_malloc_r+0x64>
 8001384:	e7cf      	b.n	8001326 <_malloc_r+0x4a>
 8001386:	bf00      	nop
 8001388:	20000478 	.word	0x20000478
 800138c:	2000047c 	.word	0x2000047c

08001390 <_realloc_r>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	4607      	mov	r7, r0
 8001394:	4614      	mov	r4, r2
 8001396:	460e      	mov	r6, r1
 8001398:	b921      	cbnz	r1, 80013a4 <_realloc_r+0x14>
 800139a:	4611      	mov	r1, r2
 800139c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80013a0:	f7ff bf9c 	b.w	80012dc <_malloc_r>
 80013a4:	b922      	cbnz	r2, 80013b0 <_realloc_r+0x20>
 80013a6:	f7ff ff4d 	bl	8001244 <_free_r>
 80013aa:	4625      	mov	r5, r4
 80013ac:	4628      	mov	r0, r5
 80013ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b0:	f000 f830 	bl	8001414 <_malloc_usable_size_r>
 80013b4:	42a0      	cmp	r0, r4
 80013b6:	d20f      	bcs.n	80013d8 <_realloc_r+0x48>
 80013b8:	4621      	mov	r1, r4
 80013ba:	4638      	mov	r0, r7
 80013bc:	f7ff ff8e 	bl	80012dc <_malloc_r>
 80013c0:	4605      	mov	r5, r0
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d0f2      	beq.n	80013ac <_realloc_r+0x1c>
 80013c6:	4631      	mov	r1, r6
 80013c8:	4622      	mov	r2, r4
 80013ca:	f7ff ff13 	bl	80011f4 <memcpy>
 80013ce:	4631      	mov	r1, r6
 80013d0:	4638      	mov	r0, r7
 80013d2:	f7ff ff37 	bl	8001244 <_free_r>
 80013d6:	e7e9      	b.n	80013ac <_realloc_r+0x1c>
 80013d8:	4635      	mov	r5, r6
 80013da:	e7e7      	b.n	80013ac <_realloc_r+0x1c>

080013dc <_sbrk_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	2300      	movs	r3, #0
 80013e0:	4d05      	ldr	r5, [pc, #20]	; (80013f8 <_sbrk_r+0x1c>)
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	602b      	str	r3, [r5, #0]
 80013e8:	f7ff fb52 	bl	8000a90 <_sbrk>
 80013ec:	1c43      	adds	r3, r0, #1
 80013ee:	d102      	bne.n	80013f6 <_sbrk_r+0x1a>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	b103      	cbz	r3, 80013f6 <_sbrk_r+0x1a>
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
 80013f8:	20000480 	.word	0x20000480

080013fc <__malloc_lock>:
 80013fc:	4801      	ldr	r0, [pc, #4]	; (8001404 <__malloc_lock+0x8>)
 80013fe:	f000 b811 	b.w	8001424 <__retarget_lock_acquire_recursive>
 8001402:	bf00      	nop
 8001404:	20000488 	.word	0x20000488

08001408 <__malloc_unlock>:
 8001408:	4801      	ldr	r0, [pc, #4]	; (8001410 <__malloc_unlock+0x8>)
 800140a:	f000 b80c 	b.w	8001426 <__retarget_lock_release_recursive>
 800140e:	bf00      	nop
 8001410:	20000488 	.word	0x20000488

08001414 <_malloc_usable_size_r>:
 8001414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001418:	1f18      	subs	r0, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	bfbc      	itt	lt
 800141e:	580b      	ldrlt	r3, [r1, r0]
 8001420:	18c0      	addlt	r0, r0, r3
 8001422:	4770      	bx	lr

08001424 <__retarget_lock_acquire_recursive>:
 8001424:	4770      	bx	lr

08001426 <__retarget_lock_release_recursive>:
 8001426:	4770      	bx	lr

08001428 <_init>:
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142a:	bf00      	nop
 800142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142e:	bc08      	pop	{r3}
 8001430:	469e      	mov	lr, r3
 8001432:	4770      	bx	lr

08001434 <_fini>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	bf00      	nop
 8001438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143a:	bc08      	pop	{r3}
 800143c:	469e      	mov	lr, r3
 800143e:	4770      	bx	lr
